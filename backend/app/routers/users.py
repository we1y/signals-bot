from fastapi import APIRouter, Depends, FastAPI, HTTPException
from pydantic import BaseModel
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from sqlalchemy.orm import joinedload
from app.services.get_db import get_db  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º get_db
from app.database import get_db as main 
from app.models.models import Profit, Transaction, User, Referrals, Balance  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Balance –ø–æ–¥–∫–ª—é—á–µ–Ω–∞
from sqlalchemy.orm import subqueryload
from app.services.users import add_referral
# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
import logging


logger = logging.getLogger(__name__)
logging.getLogger('sqlalchemy.engine').setLevel(logging.INFO)

app = FastAPI()

router = APIRouter()

@router.get("/users")
async def get_users(db: AsyncSession = Depends(get_db)):  # db - —ç—Ç–æ —Å–µ—Å—Å–∏—è
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ —Å–µ—Å—Å–∏—é db
        result = await db.execute(
            select(User)
            .options(
                subqueryload(User.balance),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º subqueryload –¥–ª—è –±–∞–ª–∞–Ω—Å–∞
                subqueryload(User.referred_by)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º subqueryload –¥–ª—è —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
            )
        )
        users = result.scalars().all()  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

        return [
            {
                "id": u.id,
                "telegram_id": u.telegram_id,
                "username": u.username,
                "first_name": u.first_name,
                "last_name": u.last_name,
                "language_code": u.language_code,
                "is_bot": u.is_bot,
                "photo_url": u.photo_url,
                "created_at": u.created_at,
                "updated_at": u.updated_at,
                "balance": u.balance.balance if u.balance else 0.0,
                "trade_balance": u.balance.trade_balance if u.balance else 0.0,
                "referred_by": {
                    "id": u.referred_by.id if u.referred_by else None,
                    "telegram_id": u.referred_by.telegram_id if u.referred_by else None,
                    "username": u.referred_by.username if u.referred_by else None
                } if u.referred_by else None
            }
            for u in users
        ]
    except Exception as e:
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}", exc_info=True)
        raise HTTPException(status_code=500, detail="An error occurred while retrieving users.")
### üîπ **–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id**
@router.get("/user/{telegram_id}")
async def get_user_by_telegram_id(telegram_id: int, db: AsyncSession = Depends(get_db)):
    try:
        logger.info(f"–ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å telegram_id: {telegram_id}")

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ —Å–µ—Å—Å–∏—é db —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º subqueryload –¥–ª—è –±–∞–ª–∞–Ω—Åa –∏ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
        result = await db.execute(
            select(User)
            .options(
                subqueryload(User.balance),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º subqueryload –¥–ª—è –±–∞–ª–∞–Ω—Å–∞
                subqueryload(User.referred_by)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º subqueryload –¥–ª—è —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
            )
            .filter(User.telegram_id == telegram_id)  # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ telegram_id
        )
        user = result.scalars().first()  # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        if user is None:
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å telegram_id {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            raise HTTPException(status_code=404, detail="User not found")

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å telegram_id {telegram_id} –Ω–∞–π–¥–µ–Ω. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ.")

        return {
            "id": user.id,
            "telegram_id": user.telegram_id,
            "username": user.username,
            "first_name": user.first_name,
            "last_name": user.last_name,
            "language_code": user.language_code,
            "is_bot": user.is_bot,
            "photo_url": user.photo_url,
            "created_at": user.created_at,
            "updated_at": user.updated_at,
            "balance": user.balance.balance if user.balance else 0.0,
            "trade_balance": user.balance.trade_balance if user.balance else 0.0,
            "referred_by": {
                "id": user.referred_by.id if user.referred_by else None,
                "telegram_id": user.referred_by.telegram_id if user.referred_by else None,
                "username": user.referred_by.username if user.referred_by else None
            } if user.referred_by else None
        }

    except Exception as e:
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ —Å –ø–æ–ª–Ω—ã–º–∏ –¥–µ—Ç–∞–ª—è–º–∏
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å telegram_id {telegram_id}: {e}", exc_info=True)
        raise HTTPException(status_code=500, detail="An error occurred while retrieving the user.")

@router.get("/transactions/{telegram_id}")
async def get_transactions(telegram_id: int, db: AsyncSession = Depends(get_db)):
    """ –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id. """
    try:
        user_result = await db.execute(select(User).filter(User.telegram_id == telegram_id))
        user = user_result.scalars().first()
        if not user:
            raise HTTPException(status_code=404, detail="User not found")

        transactions_result = await db.execute(
            select(Transaction).filter(Transaction.user_id == user.id)
        )
        transactions = transactions_result.scalars().all()

        return [{
            "id": transaction.id,
            "amount": transaction.amount,
            "transaction_type": transaction.transaction_type,
            "created_at": transaction.created_at
        } for transaction in transactions]
    except Exception as e:
        logger.error(f"Error retrieving transactions for telegram_id {telegram_id}: {str(e)}")
        raise HTTPException(status_code=500, detail="An error occurred while retrieving transactions.")

@router.get("/profits/{telegram_id}")
async def get_profits(telegram_id: int, db: AsyncSession = Depends(get_db)):
    """ –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–±—ã–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id. """
    try:
        user_result = await db.execute(select(User).filter(User.telegram_id == telegram_id))
        user = user_result.scalars().first()
        if not user:
            raise HTTPException(status_code=404, detail="User not found")

        profits_result = await db.execute(
            select(Profit).filter(Profit.user_id == user.id)
        )
        profits = profits_result.scalars().all()

        return [{
            "id": profit.id,
            "amount": profit.amount,
            "signal_id": profit.signal_id,
            "created_at": profit.created_at
        } for profit in profits]
    except Exception as e:
        logger.error(f"Error retrieving profits for telegram_id {telegram_id}: {str(e)}")
        raise HTTPException(status_code=500, detail="An error occurred while retrieving profits.")
    
class ReferralRequest(BaseModel):
    telegram_id: int
    referral_link: str

@router.post("/check_referral")
async def check_referral(request: ReferralRequest, db: AsyncSession = Depends(get_db)):
    """ 
    –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –≤–ª–∞–¥–µ–ª—å—Ü—É —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏,
    –∑–∞–ø–∏—Å—ã–≤–∞—è –µ–≥–æ telegram_id –≤ –ø–æ–ª–µ referred_by.
    """
    # –ò—â–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
    referrer_result = await db.execute(
        select(Referrals).filter(Referrals.referral_link == request.referral_link)
    )
    referrer = referrer_result.scalars().first()

    if not referrer:
        return {"exists": False, "message": "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}

    # –ò—â–µ–º –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ telegram_id
    result = await db.execute(
        select(Referrals).filter(Referrals.telegram_id == request.telegram_id)
    )
    referral = result.scalars().first()

    if referral:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω, –Ω–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è–µ–º
        if referral.referred_by:
            return {
                "exists": True,
                "message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω",
                "referral_data": {
                    "telegram_id": referral.telegram_id,
                    "referred_by": referral.referred_by
                }
            }
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º telegram_id –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Å—Å—ã–ª–∫–∏ –≤ referred_by
        referral.referred_by = referrer.telegram_id
        referrer.invited_count += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ë–î
        await db.commit()

        return {
            "exists": True,
            "message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω",
            "referral_data": {
                "telegram_id": referral.telegram_id,
                "referred_by": referral.referred_by
            }
        }

    return {"exists": False, "message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}



